#!/usr/bin/perl

#
# comcheck
#
# Watch video directories and run commmercial detection on new videos.
#
# Copyright (c) 2008-2017 John P. Wittkoski. All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of either:
#
# a) the GNU Library General Public License as published by the Free
#    Software Foundation; either version 2, or (at your option) any
#    later version, or
#
# b) the "Artistic License" which comes with Perl source code.
#

use strict;
use Getopt::Std;
use File::Basename;
use IPC::Run;
use Proc::Daemon;

$| = 1;

#
# User configurable options
#

# Directories to check for video files
my @scan_dirs = ( "/var/media/tv" );

# Extensions that indicate video files
my @video_extensions = ( "mpeg", "mpg", "ts" );

# Where to log messages (if we are logging)
my $log_dir = "/opt/sagetv/server";
my $log_file = "comcheck.log";

# Maxiumum number of commercial detection jobs to run at once
my $max_runners = 5;

# Seconds to sleep between checking for new videos
my $sleep_time = 60;

# Whether to run comskip while recordings are active
my $run_while_recording = 1;

# Seconds delay before starting (after all recordings are finished)
my $idle_delay = 5;

# Command to launch to do the commercial skipping
my $commercial_detect_cmd = "/opt/sagetv/comskip/comskip --ini=/opt/sagetv/comskip/comskip.ini";

# Delete orphaned files (i.e. files with no video file with the same name)
my $delete_orphans = 1;
my @delete_suffixes = ( 'edl', 'log', 'txt', 'logo.txt' );

#
# User configurable options end here
#

# Command line flags:
#   -d - don't go into background and show all debugging output
#   -q - don't log anything
#   -n - make no changes - don't actually run anything, delete anything, or log to the log file
our ( $opt_d, $opt_q, $opt_n );
getopts('dqn');

# To keep track of the currently running child processes
my $runners = {};

# Shortcuts
my %video_extensions = map { "." . $_ => 1 } @video_extensions;

# Sort delete suffixes by number of segments (segments are separated by '.' characters)
# Suffixes with longer segments need to be earlier in the list so the later matching
# occurs in the correct order.
@delete_suffixes = sort { $b =~ tr/\.// <=> $a =~ tr/\.// } @delete_suffixes;

# Become a daemon if not in debug mode
Proc::Daemon::Init() if ( ! $opt_d );

$SIG{TERM} = \&process_term;

logger("Starting\n");

while (1) {
    #
    # Check for runners that have ended
    #
    foreach my $video_file ( keys %$runners ) {
        my $h = $runners->{$video_file};
        if ( $h->pumpable() ) {
            logger("Still running: $video_file\n") if ( $opt_d );
        } else {
            $h->finish();
            if ( my $result = $h->result() ) {
                logger("Completed: $video_file\n");
            } else {
                logger("Failed: $video_file\n");
            }
            delete $runners->{$video_file};
        }
    }

    #
    # TO DO: Currently $run_while_recording really only applies on a per @scan_dirs basis.
    #        Fix that so all files in all directories are scanned once, then processed as a group.
    #
    foreach my $scan_dir ( @scan_dirs ) {
        chdir $scan_dir || die "Couldn't chdir to $scan_dir";

        #
        # Collect all the files to process (in this directory)
        #
        opendir(IN, $scan_dir);
        my @files = readdir(IN);
        closedir(IN);

        #
        # Check for orphaned files to delete
        #
        if ( $delete_orphans ) {
            foreach my $file ( @files ) {
                next if ( $file eq "." );
                next if ( $file eq ".." );

                # Is file's extension one that should be deleted if orphaned?
                my $ext_match = '';
                foreach my $ext ( @delete_suffixes ) {
                    if ( $file =~ /\.$ext$/ ) {
                        $ext_match = $ext;
                        last;
                    }
                }
                next unless ( $ext_match );

                # Check for matching video file
                my $match = 0;
                my ($filename, $filesuffix) = $file =~ /(.+)\.($ext_match)$/;
                foreach my $ext ( @video_extensions ) {
                    if ( -f "$scan_dir/$filename.$ext" ) {
                        $match++;
                        last;
                    }
                }

                # No matching video file, this file is an orphan
                if ( ! $match ) {
                    if ( ! $opt_n ) {
                        unlink "$scan_dir/$filename.$filesuffix";
                        logger("Removed orphan file $filename.$filesuffix\n");
                    } else {
                        logger("Would remove orphan file $filename.$filesuffix\n") if ( $opt_d );
                    }
                } else {
                    logger("Would NOT remove file $filename.$filesuffix\n") if ( $opt_d );
                }
            }
        }

        #
        # If needed, check whether any recordings are running
        #
        if ( ! $run_while_recording ) {
            my $latest_mtime = 0;

            foreach my $file ( @files ) {
                next if ( $file eq "." );
                next if ( $file eq ".." );
                next unless ( -s $file );

                my ( $filename, $directories, $filesuffix ) = fileparse($file, qr/\.[^.]*/);

                #
                # Ignore files that don't look like video files
                #
                next unless ( $video_extensions{$filesuffix} );

                my $mtime = (stat($file))[9];
                if ( $mtime > $latest_mtime ) {
                    $latest_mtime = $mtime;
                }
            }

            my $soonest = time - ( $idle_delay * 60 );
            if ( $latest_mtime > $soonest ) {
                logger("Waiting for recordings to finish\n") if ( $opt_d );
                next;
            }
        }

        #
        # Find shows that need commercial detection
        #
        foreach my $file ( @files ) {
            next if ( $file eq "." );
            next if ( $file eq ".." );
            next unless ( -s $file );

            my ( $filename, $directories, $filesuffix ) = fileparse($file, qr/\.[^.]*/);

            #
            # Ignore files that don't look like video files
            #
            next unless ( $video_extensions{$filesuffix} );

            #
            # Skip if there is already a result file
            #
            if ( -f "$scan_dir/$filename.edl" ) {
                logger("Already Done - $file\n") if ( $opt_d );
                next;
            }

            #
            # If the queue is full, no point in checking any more files...
            #
            if ( scalar keys %$runners >= $max_runners ) {
               logger("Queue full\n") if ( $opt_d );
               last;
            }

            #
            # Skip files that are already being processed
            #
            if ( defined($runners->{"$scan_dir/$file"}) ) {
                logger("Ignoring (already running): $file\n") if ( $opt_d );
                next;
            }

            #
            # Start commercial detection
            #
            if ( ! $opt_n ) {
                logger("Starting: $scan_dir/$file\n");
                my $h = IPC::Run::start "$commercial_detect_cmd '$file' > /dev/null 2>&1";
                $runners->{"$scan_dir/$file"} = $h;
            } else {
                logger("Would have run: $commercial_detect_cmd '$file' > /dev/null 2>&1\n");
            }
        }
    }

    logger("Sleeping $sleep_time seconds...\n") if ( $opt_d );
    sleep $sleep_time;
}

exit;

#
# Send the TERM signal to any running children
# TO DO: This doesn't take care of the grandchildren!
#
sub process_term {
    foreach my $video_file ( keys %$runners ) {
        my $h = $runners->{$video_file};
        $h->signal("TERM");
    }
    exit 0;
}

#
# Simple logging
#
sub logger {
    my ( $msg ) = @_;

    return if ( $opt_q );

    $msg = localtime(time) . " $msg";

    if ( $opt_d | $opt_n ) {
        print $msg;
    } else {
        open(OUT, ">>$log_dir/$log_file");
        print OUT $msg;
        close(OUT);
    }
};

